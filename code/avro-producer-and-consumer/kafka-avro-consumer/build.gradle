plugins {
  id 'org.springframework.boot' version "${springBootVersion}"
  id 'io.spring.dependency-management' version "${springDependencyManagementPluginVersion}"
  id "com.github.davidmc24.gradle.plugin.avro" version "${avroPluginVersion}"
  id 'org.flywaydb.flyway' version "${flywayVersion}"
  id 'java'
}

group = 'com.codecafe.kafka.avro'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
  maven {
    url 'https://packages.confluent.io/maven'
  }
}

dependencies {
  implementation "org.springframework.boot:spring-boot-starter:${springBootVersion}"
  implementation "org.springframework.kafka:spring-kafka:${springKafkaVersion}"
  implementation "org.springframework:spring-aspects:${springAspectsVersion}"
  implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
  implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
  implementation "org.apache.logging.log4j:log4j-to-slf4j:${log4jVersion}"
  implementation "org.apache.avro:avro:${avroVersion}"
  implementation "io.confluent:kafka-avro-serializer:${kafkaAvroSerializerVersion}"
  implementation "org.flywaydb:flyway-core:${flywayVersion}"
  runtimeOnly "org.postgresql:postgresql:${postgresVersion}"
  compileOnly "org.projectlombok:lombok:${lombokVersion}"
  annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
  testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
  testImplementation "org.springframework.kafka:spring-kafka-test:${springKafkaVersion}"
}

flyway {
  url = System.getenv("JDBC_DATABASE_URL") ?: 'jdbc:postgresql://localhost:5432/booksDb'
  user = System.getenv("JDBC_DATABASE_USERNAME") ?: 'booksDbUser'
  password = System.getenv("JDBC_DATABASE_PASSWORD") ?: 'booksDbPassword'
  baselineOnMigrate = true
}

tasks.named('test') {
  useJUnitPlatform()
}
